<?php

namespace remiii\GlobalBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SpotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpotRepository extends EntityRepository
{

    public function getSpotByXAndY ( $x , $y )
    {
        $qb = $this -> _em -> createQueryBuilder ( 's' )
            -> select ( 's' )
            -> from ( $this -> getEntityName ( ) , 's' )
            -> where ( 'ROUND(s.x,3) = :x' )
            -> andWhere ( 'ROUND(s.y,3) = :y' )
            -> setParameter ( 'x', $x )
            -> setParameter ( 'y', $y ) ;
        return $qb -> getQuery ( ) -> getSingleResult( ) ;
    }

    public function getSpotsList ( )
    {
        $qb = $this -> _em -> createQueryBuilder ( 's' )
            -> select ( 's' )
            -> from ( $this -> getEntityName ( ) , 's' )
            -> orderBy ( 's.name', 'ASC' ) ;
        return $qb -> getQuery ( ) -> getResult( ) ;
    }

    public function getSpotsWithEmptyCountryAndStateAndCountyAndCity ( )
    {
        $qb = $this -> _em -> createQueryBuilder ( 's' )
            -> select ( 's' )
            -> from ( $this -> getEntityName ( ) , 's' )
            -> where ( 's.country is null' )
            -> andWhere ( 's.state is null' )
            -> andWhere ( 's.county is null' )
            -> andWhere ( 's.city is null' )
            -> andWhere ( 's.locale is not null' ) ;
        return $qb -> getQuery ( ) -> getResult( ) ;
    }

    public function getCountries ( )
    {
        $qb = $this -> _em -> createQueryBuilder ( 's' )
            -> select ( 's.country , s.countryUrl' )
            -> from ( $this -> getEntityName ( ) , 's' )
            -> where ( 's.country is not null' )
            -> groupBy ( 's.country' ) ;
        return $qb -> getQuery ( ) -> getResult( ) ;
    }

    public function getStatesByCountry ( $countryUrl )
    {
        $qb = $this -> _em -> createQueryBuilder ( 's' )
            -> select ( 's.country , s.countryUrl , s.state , s.stateUrl' )
            -> from ( $this -> getEntityName ( ) , 's' )
            -> where ( 's.state is not null' )
            -> andWhere ( 's.countryUrl = :countryUrl')
            -> groupBy ( 's.state' )
            -> setParameters ( array ( 'countryUrl' => $countryUrl ) ) ;
        return $qb -> getQuery ( ) -> getResult( ) ;
    }

    public function getCountiesByCountryAndState ( $countryUrl , $stateUrl )
    {
        $qb = $this -> _em -> createQueryBuilder ( 's' )
            -> select ( 's.country , s.countryUrl , s.state , s.stateUrl , s.county , s.countyUrl' )
            -> from ( $this -> getEntityName ( ) , 's' )
            -> where ( 's.county is not null' )
            -> andWhere ( 's.countryUrl = :countryUrl')
            -> andWhere ( 's.stateUrl = :stateUrl')
            -> groupBy ( 's.county' )
            -> setParameters ( array ( 'countryUrl' => $countryUrl , 'stateUrl' => $stateUrl ) ) ;
        return $qb -> getQuery ( ) -> getResult( ) ;
    }

    public function getCitiesByCountryAndStateAndCounty ( $countryUrl , $stateUrl , $countyUrl )
    {
        $qb = $this -> _em -> createQueryBuilder ( 's' )
            -> select ( 's.country , s.countryUrl , s.state , s.stateUrl , s.county , s.countyUrl , s.city , s.cityUrl' )
            -> from ( $this -> getEntityName ( ) , 's' )
            -> where ( 's.city is not null' )
            -> andWhere ( 's.countryUrl = :countryUrl')
            -> andWhere ( 's.stateUrl = :stateUrl')
            -> andWhere ( 's.countyUrl = :countyUrl')
            -> groupBy ( 's.city' )
            -> setParameters ( array ( 'countryUrl' => $countryUrl , 'stateUrl' => $stateUrl , 'countyUrl' => $countyUrl ) ) ;
        return $qb -> getQuery ( ) -> getResult( ) ;
    }

    public function getSpotsByCountryAndStateAndCountyAndCity ( $countryUrl , $stateUrl , $countyUrl , $cityUrl )
    {
        $qb = $this -> _em -> createQueryBuilder ( 's' )
            -> select ( 's.country , s.countryUrl , s.state , s.stateUrl , s.county , s.countyUrl , s.city , s.cityUrl , s.name , s.url' )
            -> from ( $this -> getEntityName ( ) , 's' )
            -> where ( 's.name is not null' )
            -> andWhere ( 's.countryUrl = :countryUrl')
            -> andWhere ( 's.stateUrl = :stateUrl')
            -> andWhere ( 's.countyUrl = :countyUrl')
            -> andWhere ( 's.cityUrl = :cityUrl')
            -> groupBy ( 's.name' )
            -> setParameters ( array ( 'countryUrl' => $countryUrl , 'stateUrl' => $stateUrl , 'countyUrl' => $countyUrl , 'cityUrl' => $cityUrl ) ) ;
        return $qb -> getQuery ( ) -> getResult( ) ;
    }

}

